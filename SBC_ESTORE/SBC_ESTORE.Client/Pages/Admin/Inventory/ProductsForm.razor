@page "/admin/add-product"
@page "/admin/edit-product/{Id:int}"
@using SBC_ESTORE.Client.Services.CategoryServices

@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject NavigationManager NavigationManager
@inject IClientProductService ProductService
@inject IClientCategoryService CategoryService

<PageLayout>
    @if (Id is null)
    {
        <title>Add New Product</title>
        <MudText Typo="Typo.h6" Class="py-2 px-md-5">Add New Product</MudText>
    }
    else
    {
        <title>Edit @Product.Name</title>
        <MudText Typo="Typo.h6" Class="py-2 px-md-5">Edit @Product.Name</MudText>
    }

    <EditForm Model="Product" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <MudGrid Class="py-5 px-md-5">
            <MudItem sm="12" md="6" Class="d-flex gap-3 row">
                <MudTextField @bind-Value="Product.Name"
                              For="@(()=>@Product.Name)"
                              Label="Name"
                              Required="true"
                              Variant="Variant.Outlined"
                              ShrinkLabel Class="mx-3" />

                <MudTextField @bind-Value="Product.Description"
                              For="@(()=>@Product.Description)"
                              Label="Description"
                              Required="true"
                              Variant="Variant.Outlined"
                              Lines="5"
                              ShrinkLabel Class="mx-3" />

                <MudTextField @bind-Value="Product.Quantity"
                              For="@(()=>@Product.Quantity)"
                              Label="Quantity"
                              Required="true"
                              Variant="Variant.Outlined"
                              ShrinkLabel Class="mx-3" />

                <MudTextField @bind-Value="Product.Price"
                              For="@(()=>@Product.Price)"
                              Label="Price"
                              Required="true"
                              Variant="Variant.Outlined"
                              ShrinkLabel
                              Adornment="Adornment.Start"
                              AdornmentText="₱" Class="mx-3"/>
                <MudSelect Label="Category" 
                           HelperText="Choose Product Category" 
                           @bind-Value="Product.ProductCategory"
                           For="@(()=>@Product.ProductCategory)"
                           Required="true"
                           Variant="Variant.Outlined"
                           ShrinkLabel>
                    @foreach (var category in Category)
                    {
                        <MudSelectItem Value="@category">@category.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="12" md="6" Class="d-flex gap-3 row">
                <MudPaper Elevation="0" Class="w-100 m-0" Height="350px">
                    <MudPaper Class="h-100 w-100 d-flex flex-column justify-center align-center">
                        <MudPaper Class="h-90 w-100 d-flex justify-center align-center" Elevation="0">
                            @if (!string.IsNullOrEmpty(Product.ImageUrl))
                            {
                                <MudImage Src="@Product.ImageUrl" Class="rounded my-2 w-100" Height="300" ObjectFit="ObjectFit.Contain"></MudImage>
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Image" Class="h-30 w-30"></MudIcon>
                            }
                        </MudPaper>
                        <InputFile id="product" OnChange="OnFileSelectedProduct" hidden />
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Upload"
                                   for="product"
                                   Class="mt-2">
                            Upload Image
                        </MudButton>
                    </MudPaper>
                </MudPaper>

                <MudPaper Class="d-flex gap-4 w-100 m-0" Elevation="0">
                    <MudButton ButtonType="ButtonType.Button" Color="Color.Secondary" Variant="Variant.Filled" FullWidth>Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" FullWidth>Submit</MudButton>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </EditForm>
</PageLayout>



@code {
    [Parameter]
    public int? Id { get; set; }

    public ProductDTO Product = new ProductDTO();
    public List<CategoryDTO> Category = new List<CategoryDTO>();


    protected override async Task OnParametersSetAsync()
    {

        if (Id != null)
        {
            var response = await ProductService.GetProductById((int)Id);
            if (response != null)
            {
                Product = response;     
            }
        }

        var categoryResponse = await CategoryService.GetAllCategory();
        if (categoryResponse != null)
        {
            Category = categoryResponse;
        }


    }

    private async Task OnFileSelectedProduct(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 500, 500);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format}; base64, {Convert.ToBase64String(buffer)}";
        Product.ImageUrl = imageData;
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            //Add
            await ProductService.AddProduct(Product);
        }
        else
        {
            //Update
            await ProductService.UpdateProduct(Product, (int)Id);
        }
    }

}
