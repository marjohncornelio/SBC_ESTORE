@page "/admin/add-product"
@page "/admin/edit-product/{Id:int}"
@using SBC_ESTORE.Client.Services.CategoryServices

@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject NavigationManager NavigationManager
@inject IClientProductService ProductService
@inject IClientCategoryService CategoryService

<PageLayout>
    <AuthorizeView Roles="SUPERUSER">
        <Authorized>
            @if (Id is null)
            {
                <title>Add New Product</title>
                <MudText Typo="Typo.h6" Class="py-2 px-md-5">Add New Product</MudText>
            }
            else
            {
                <title>Edit @Product.Name</title>
                <MudText Typo="Typo.h6" Class="py-2 px-md-5">Edit @Product.Name</MudText>
            }

            <EditForm Model="Product" OnValidSubmit="HandleSubmit" FormName="Form" Context="Form">
                <DataAnnotationsValidator />
                <MudGrid Class="py-5 px-md-5">
                    <MudItem sm="12" md="6" Class="d-flex gap-3 row">
                        <MudTextField @bind-Value="Product.Name"
                                      For="@(()=>@Product.Name)"
                                      Label="Name"
                                      Required="true"
                                      Variant="Variant.Outlined"
                                      ShrinkLabel Class="mx-3" />

                        <MudTextField @bind-Value="Product.Description"
                                      For="@(()=>@Product.Description)"
                                      Label="Description"
                                      Required="true"
                                      Variant="Variant.Outlined"
                                      Lines="5"
                                      ShrinkLabel Class="mx-3" />

                        <MudTextField @bind-Value="Product.Quantity"
                                      For="@(()=>@Product.Quantity)"
                                      Label="Quantity"
                                      Required="true"
                                      Variant="Variant.Outlined"
                                      ShrinkLabel Class="mx-3" />

                        <MudTextField @bind-Value="Product.Price"
                                      For="@(()=>@Product.Price)"
                                      Label="Price"
                                      Required="true"
                                      Variant="Variant.Outlined"
                                      ShrinkLabel
                                      Adornment="Adornment.Start"
                                      AdornmentText="₱" Class="mx-3" />
                        <MudSelect Label="Category"
                                   HelperText="Choose Product Category"
                                   @bind-Value="Product.ProductCategory"
                                   For="@(()=>@Product.ProductCategory)"
                                   Required="true"
                                   Variant="Variant.Outlined"
                                   ShrinkLabel>
                            @foreach (var category in Category)
                            {
                                <MudSelectItem Value="@category">@category.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="12" md="6" Class="d-flex row">
                        <MudPaper Elevation="0" Class="w-100 m-0 border-1 p-0" Height="350px">
                            <div class="d-flex justify-content-center row position-relative h-100">
                                <InputFile id="product" OnChange="OnFileSelectedProduct" hidden />
                                <div class="d-flex justify-content-center row h-100">
                                    <MudButton HtmlTag="label" for="product" FullWidth>
                                        <MudContainer Class="h-100 w-100 d-flex justify-center">
                                            @if (!string.IsNullOrEmpty(Product.ImageUrl))
                                            {
                                                <MudImage Src="@Product.ImageUrl" Style="width: 100%; height: 330px" ObjectFit="ObjectFit.Contain"></MudImage>
                                            }
                                            else
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.Upload" />
                                            }
                                        </MudContainer>
                                    </MudButton>
                                </div>
                            </div>
                        </MudPaper>

                        <MudContainer Class="d-flex gap-4 w-100 m-0 p-0" Style="height: 50px">
                            <MudButton ButtonType="ButtonType.Button" Color="Color.Secondary" Variant="Variant.Filled" OnClick="Cancel" FullWidth>Cancel</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" FullWidth>Submit</MudButton>
                        </MudContainer>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </Authorized>
        <NotAuthorized>
            <Forbidden />
        </NotAuthorized>
    </AuthorizeView>
  
</PageLayout>



@code {
    [Parameter]
    public int? Id { get; set; }

    public ProductDTO Product = new ProductDTO();
    public List<CategoryDTO> Category = new List<CategoryDTO>();


    protected override async Task OnParametersSetAsync()
    {

        if (Id != null)
        {
            var response = await ProductService.GetProductById((int)Id);
            if (response != null)
            {
                Product = response;     
            }
        }

        var categoryResponse = await CategoryService.GetAllCategory();
        if (categoryResponse != null)
        {
            Category = categoryResponse;
        }


    }

    private async Task OnFileSelectedProduct(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 500, 500);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format}; base64, {Convert.ToBase64String(buffer)}";
        Product.ImageUrl = imageData;
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            //Add
            await ProductService.AddProduct(Product);
        }
        else
        {
            //Update
            await ProductService.UpdateProduct(Product, (int)Id);
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/admin/products");
    }

}
