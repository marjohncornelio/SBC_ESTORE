@page "/login"

@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@inject NavigationManager NavigationManager
@inject IClientAuthService ClientAuthService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>
<title>Login</title>

    <EditForm Model="loginUser" OnValidSubmit="HandleSubmit">
        <MudCard Class="pa-10 m-auto" Style="margin-top: 50px !important" MaxWidth="500px">
            <MudCardHeader Class="px-0">
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">Login</MudText>
                    @if (error != null)
                    {
                    <MudPaper Class="my-2 py-2" Style="@($"color:{Colors.BlueGrey.Darken3}; background:{Colors.Grey.Lighten4};")" Elevation="0">
                        <MudText Typo="Typo.subtitle1" Align="Align.Center"><em>@error</em></MudText>
                    </MudPaper>
                    }
                </CardHeaderContent>
            </MudCardHeader>
            <DataAnnotationsValidator />
            <div>
                <MudTextField @bind-Value="@loginUser.EmailOrUsername"
                              Label="Email / Username" Variant="Variant.Outlined"
                              For="@(()=> loginUser.EmailOrUsername)"
                              Class="mb-5"
                              Required="true" />
            </div>
            <div>
                <MudTextField @bind-Value="@loginUser.Password"
                              InputType="@PasswordInput"
                              Label="Password" Variant="Variant.Outlined"
                              For="@(()=> loginUser.Password)"
                              Class="mb-5"
                              Required="true"
                              Adornment="Adornment.End"
                              AdornmentIcon="@PasswordInputIcon"
                              OnAdornmentClick="ButtonTestclick"
                              AdornmentAriaLabel="Show Password" />
            </div>

            <div class="d-grid gap-2 mt-3">
                <button class="btn btn-primary" Type="submit" disabled="@isLoading">
                    @if(isLoading)
                    {
                        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText Typo="Typo.subtitle1">Login</MudText>
                    }
                </button>
            </div>
            <div class="d-flex justify-content-center">
                <MudText Typo="Typo.subtitle1">Don't have an account? </MudText>
                <MudText Typo="Typo.subtitle1" Class="ml-2"><a href="/register" style="color: deepskyblue">Register</a></MudText>
            </div>
        </MudCard>
    </EditForm>


@code {
    public LoginDTO loginUser = new LoginDTO();

    private AuthenticationState? authenticationState;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authenticationState.User?.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    bool isLoading = false;
    bool isShow;
    string? error = null;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task HandleSubmit()
    {
        isLoading = true;
        error = null;

        var response = await ClientAuthService.LoginAccount(loginUser);
        if (response != null)
        {
            error = response;
        }

        isLoading = false;
    }

    void Register()
    {
        NavigationManager.NavigateTo("/register");
    }

}
