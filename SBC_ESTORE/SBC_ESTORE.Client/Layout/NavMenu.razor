@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IClientUserService UserService
@inject IClientAuthService AuthService

<AuthorizeView>
    <MudNavMenu Color="Color.Success" Bordered="true" Style="overflow: hidden; position: relative; height: 100vh">

        <MudContainer Class="d-flex justify-center py-5">
            <MudImage Src="./logo.png" Style="width: 100px; height: 100px;"></MudImage>
        </MudContainer>

        <MudDivider />
        <MudDivider />

        <MudContainer class="d-flex py-5">
            <MudContainer Class="m-0 p-0 w-auto">
                <MudAvatar Style="width: 60px; height: 60px;" Elevation="2">
                    <MudImage Src="@AvatarUrl"></MudImage>
                </MudAvatar>
            </MudContainer>


            <MudContainer Class="m-0 p-0 d-flex row align-items-center ml-2">
                <MudContainer Class="p-0 m-0">
                    <MudText Typo="Typo.h6" Style="font-size: 15px; line-height: 15px">@Helpers.TruncateName(User.Name, 9)</MudText>
                    @if (context.User.IsInRole("USER"))
                    {
                        <MudText Typo="Typo.subtitle1" Style="font-size: 14px">@User.UserName</MudText>
                    }
                    @if (context.User.IsInRole("SUPERUSER") || context.User.IsInRole("ADMIN"))
                    {
                        <div style="display: inline-block;">
                            <MudText Typo="Typo.subtitle1" Style="font-size: 10px; border-radius: 3px;" Color="Color.Primary"><em>@User.Role.ToString()</em></MudText>
                        </div>
                    }
                </MudContainer>
            </MudContainer>
            <div class="d-flex align-center">
                <MudMenu Icon="@Icons.Material.Filled.Settings" Class="p-0 m-0 icon" AnchorOrigin="Origin.BottomRight">
                    @if (context.User?.Identity?.IsAuthenticated == true)
                    {
                        <MudNavLink Href="/account-settings">
                            Account Settings
                        </MudNavLink>
                    }
                </MudMenu>
            </div>
        </MudContainer>
       
        <MudDivider />
 

@*         <MudNavLink Href="/" Match="NavLinkMatch.All" >
            <MudIcon Icon="@Icons.Material.Outlined.Dashboard" Class="mr-2"/> Dashboard
        </MudNavLink> *@
        <MudNavLink Href="/chats" Match="NavLinkMatch.Prefix">
            <MudIcon Icon="@Icons.Material.Outlined.Chat" Class="mr-2"/> Chats
        </MudNavLink>
        <MudNavLink Href="/products" Match="NavLinkMatch.Prefix">
            <MudIcon Icon="@Icons.Material.Outlined.ShoppingBasket" Class="mr-2"/> Products
        </MudNavLink>
        @if (context.User.IsInRole("SUPERUSER") || context.User.IsInRole("ADMIN"))
        {
            @* <MudNavLink Href="/sales" Match="NavLinkMatch.Prefix">
                <MudIcon Icon="@Icons.Material.Outlined.Sell" Class="mr-2" /> Sales
            </MudNavLink> *@
            <MudNavLink Href="/admin/orders" Match="NavLinkMatch.Prefix">
                <MudIcon Icon="@Icons.Material.Outlined.ShoppingBag" Class="mr-2" /> Orders
            </MudNavLink>
            <MudNavGroup Title="Inventory" Icon="@Icons.Material.Outlined.Inventory" Class="pl-3">
               <AuthorizeView Roles="SUPERUSER" Context="AddProduct">
                    <MudNavLink Href="/admin/add-product" Match="NavLinkMatch.Prefix">Add Product</MudNavLink>
               </AuthorizeView>
                <MudNavLink Href="/admin/products" Match="NavLinkMatch.Prefix">Product List</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="Category" Icon="@Icons.Material.Filled.List" Class="pl-3">
                <MudNavLink Href="/admin/category" Match="NavLinkMatch.Prefix">Category List</MudNavLink>
            </MudNavGroup>
            <MudNavLink Href="/admin/users" Match="NavLinkMatch.Prefix">
                <MudIcon Icon="@Icons.Material.Outlined.People" Class="mr-2" /> Users
            </MudNavLink>
        }
        @if (context.User.IsInRole("USER"))
        {
            <MudNavLink Href="/my-orders" Match="NavLinkMatch.Prefix">
                <MudIcon Icon="@Icons.Material.Outlined.History" Class="mr-2" /> Order History
            </MudNavLink>
        }
        @if(context.User?.Identity?.IsAuthenticated == true)
        {
                <MudNavLink OnClick="HandleLogout" Style="position: absolute; bottom: 10px">
                    <MudIcon Icon="@Icons.Material.Outlined.Logout" Class="mr-2" /> Logout
                </MudNavLink>
        }
    </MudNavMenu>
</AuthorizeView>

<style>
    .icon > *{
        padding: 0
    }
</style>

@code {

    public UserSideBarDTO User = new UserSideBarDTO();
    public string? AvatarUrl { get; set; }
    public string? UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserId = state.User.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value!;

        var response = await UserService.GetUserInfoForSidebar(int.Parse(UserId));
        if (response != null)
        {
            User = response;
            AvatarUrl = response.AvatarURL;
        }
    }


    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 400, 400);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format}; base64, {Convert.ToBase64String(buffer)}";
        AvatarUrl = imageData;

        if (UserId != null && AvatarUrl != null)
        {
            await UserService.UploadAvatar(AvatarUrl, int.Parse(UserId));
        }
    }

    async void HandleLogout()
    {
        await AuthService.LogoutAccount();
    }

}